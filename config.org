* benchmark-init
  #+begin_src emacs-lisp
    (use-package benchmark-init
      :ensure t)
  #+end_src
* package-archives
  #+begin_src emacs-lisp
    (require 'package)
    (setq package-archives
      '(("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
	("marmalade" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/marmalade/")
	("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
	("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
	("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")))
 #+end_src
* use-package
  #+begin_src emacs-lisp 
    (setq use-package-always-defer nil)
  #+end_src
* quelpai
  #+begin_src emacs-lisp
    (use-package quelpa-use-package
      :ensure t
      :demand t
      :init
      (setq quelpa-update-melpa-p nil);不要在启动的时候更新melpa
      )
  #+end_src
* misc
** spilt toggle 分区翻转
   #+begin_src emacs-lisp
     (defun toggle-frame-split ()
       "If the frame is split vertically, split it horizontally or vice versa.
     Assumes that the frame is only split into two."
       (interactive)
       (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
       (let ((split-vertically-p (window-combined-p)))
	 (delete-window) ; closes current window
	 (if split-vertically-p
	     (split-window-horizontally)
	   (split-window-vertically)) ; gives us a split with the other window twice
	 (switch-to-buffer nil))) ; restore the original window in this part of the frame

     ;; I don't use the default binding of 'C-x 5', so use toggle-frame-split instead
     (global-set-key (kbd "C-x 9") 'toggle-frame-split)
   #+end_src
** deforg buffer name
   #+begin_src emacs-lisp
     (defun set-org-src-buffer-name ()
       (interactive)
       (cond
	((equal major-mode 'c-mode)
	 (setq buffer-file-name "temp.c"))
	((equal major-mode 'c++-mode)
	 (setq buffer-file-name "temp.cpp"))
	((equal major-mode 'python-mode)
	 (setq buffer-file-name "temp.py"))))

     (add-hook 'org-src-mode-hook 'set-org-src-buffer-name)
   #+end_src
* preface
** windows 
   #+begin_src emacs-lisp
     (tool-bar-mode 0);;工具栏
     (menu-bar-mode 1);;菜单栏
     (scroll-bar-mode 0);;滚动栏
     ;;注意，nil已经被0代替
     (display-time-mode 1) 
     (setq display-time-24hr-format t)
     (setq tab-width 1)
     (setq display-time-day-and-date t) ;;显示时间、星期、日期
     (global-hl-line-mode 1) ;;当前行高亮
     (global-linum-mode 1)
     (fringe-mode '(10 . 1))
     (setq inhibit-splash-screen t)
   #+end_src
** dashboard(welcome)
   #+begin_src emacs-lisp
     (use-package dashboard
       :ensure t
       :demand t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t))
   #+end_src
** doom-modeline
   #+begin_src emacs-lisp
     (use-package doom-modeline
	   :ensure t
	   :defer 2
	   :hook (after-init . doom-modeline-mode))
     ;      :custom-face
     ;      (mode-line ((t (:height 1))))
     ;      (mode-line-inactive ((t (:height 1))))
     ;      )
     ;      :config
     ;      (setq doom-modeline-height 10)
     ;      (setq doom-modeline--font-height 10)
   #+end_src
** neotree 
   #+begin_src emacs-lisp
     (use-package neotree
       :ensure t
       :config
       (setq inhibit-compacting-font-caches t)
       (setq neo-theme 'icons))
   #+end_src
** indent-guides(Tab) 
   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
       :ensure t
       :demand t
       :config
       (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
       (setq highlight-indent-guides-method 'column)
       )
   #+end_src
* about backup files
  #+begin_src emacs-lisp
    (setq
	 backup-by-copying t ; 自动备份
	 backup-directory-alist
	 '(("." . "~/.em_backup")) ; 自动备份在目录"~/.em_backup"下
	 delete-old-versions t ; 自动删除旧的备份文件
	 kept-new-versions 3 ; 保留最近的3个备份文件
	 kept-old-versions 1 ; 保留最早的1个备份文件
	 version-control t ;多次备份
	 create-lockfiles nil) ;#文件
  #+end_src
* evil! yes!
  #+begin_src emacs-lisp
    ;使用vim 键位
    (use-package evil
      :ensure t
      :demand t
      :config (evil-mode 1))
  #+end_src
* set the font
#+BEGIN_SRC emacs-lisp
    (defun set-font (english chinese english-size chinese-size)
       (set-face-attribute 'default nil :font
			   (format   "%s:pixelsize=%d"  english english-size))
       (if (display-graphic-p) (dolist (charset '(kana han symbol cjk-misc bopomofo))
	 (set-fontset-font (frame-parameter nil 'font) charset
			   (font-spec :family chinese :size chinese-size)))))
  ;;下面的内容需要替换成相关系统的字体，未设置系统检测
    (set-font   "Hack Nerd Font Mono" "STFangsong" 35 42)
#+END_SRC
* set the themes
 configuration
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :demand
    :config
    (load-theme 'doom-nord t nil))
#+END_SRC
* proof general (for coq) 
  #+begin_src emacs-lisp
    (use-package proof-general
      :defer t
      :ensure t
      :config
      (setq proof-three-window-mode-policy 'hybrid)
      (setq coq-compile-before-require t)
      )
  #+end_src
* org-mode
** org-plus
   #+BEGIN_SRC emacs-lisp
     (use-package org-plus-contrib
       :ensure t
       :disabled t)
   #+END_SRC
** org-pretty-icon
   #+begin_src emacs-lisp
     (setq org-pretty-entities 1)
   #+end_src
** org-auto-refresh-image
   #+begin_src emacs-lisp
     (setq org-startup-with-inline-images t)
     (defun shk-fix-inline-images ()
       (when org-inline-image-overlays
	 (org-redisplay-inline-images)))
     (add-hook 'org-babel-after-execute-hook 'shk-fix-inline-images)
   #+end_src
** org-level-highlight-color 
   #+begin_src emacs-lisp
     ;(custom-theme-set-faces 'user
     ;			`(org-level-1 ((t (:foreground "orange"))))
     ;			`(org-level-2 ((t (:foreground "green"))))
     ;			`(org-level-3 ((t (:foreground "blue"))))
     ;			`(org-level-4 ((t (:foreground "yellow"))))
     ;			`(org-level-5 ((t (:foreground "cyan"))))
     ;			`(org-level-6 ((t (:foreground "green"))))
     ;			`(org-level-7 ((t (:foreground "red"))))
     ;			`(org-level-8 ((t (:foreground "blue"))))
     ;			`(company-box-candidate ((t (:foreground "DeepSkyBlue3")))))
   #+end_src
** org-hook(truncate)
   just like text mode auto change the line
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda()
		 (setq truncate-lines nil)))
   #+END_SRC
** org-babel-function
   excutable file in org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package ob-rust
       :ensure t)
     (org-babel-do-load-languages
      'org-babel-load-languages '((C . t)
				  (java . t)
				  (python . t)
				  (dot . t)
				  (ditaa . t)
				  (rust . t)
				  (scheme . t))
      )
   #+END_SRC
** org-bullet
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :init
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
     )
   #+END_SRC
** ox-twbs
   #+BEGIN_SRC emacs-lisp
     (use-package ox-twbs)
   #+END_SRC
** org-drill
   #+BEGIN_SRC emacs-lisp
     (use-package org-drill
       :ensure t
       :config
       (setq org-drill-hide-item-headings-p nil)
       (setq org-drill-auto-pronounce t)
       (setq org-drill-learn-fraction 0.25)
       (setq org-drill-add-random-noise-to-intervals-p t)
     )
   #+END_SRC
** org-brain (concept mapping)
   #+begin_src emacs-lisp
     (use-package org-brain
       :ensure t)

   #+end_src
** org-tempo
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (tempo-define-template "new-words"
		 '("* " p " :drill:\ntranslate the word\n" "** Chinese\n** example" >)
		 "<n"
		 "Insert a property tempate")
  ;;添加新单词的方法 <n 用于org-drill的使用
#+END_SRC
* lsp-mode
  #+begin_src emacs-lisp
    ;;使用lsp进行补全需要下载相关的语言后端，详见emacs-lsp github相关内容
    (use-package lsp-mode
      :ensure t
      :hook
      (c-mode . lsp)
      (c++-mode . lsp)
      (python-mode . lsp)
      (go-mode . lsp)
      :commands lsp
      :init
      (setq lsp-prefer-flymake nil)
      (setq lsp-enable-semantic-highlighting t)
      (setq lsp-enable-snippet t)
      )
  #+end_src
** lsp-ui
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :ensure t
       :commands lsp-ui
       :config
       (setq lsp-prefer-flymake nil)
       )
   #+end_src
** lsp-treemacs
   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :defer t
       :ensure t
       )
   #+end_src
* dap-mode
  #+begin_src emacs-lisp
    (use-package dap-mode
      :ensure t
      :defer t
      )
  #+end_src
* company
** yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (yas-global-mode 1)
       )
   #+end_src
** company-mode
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :init
      (global-company-mode 1)
      (setq company-idle-delay 0
	    company-minimum-prefix-length 1
	    company-selection-wrap-around t))
#+END_SRC
** company-lsp
   #+begin_src emacs-lisp
     (use-package company-lsp
       :ensure t
       :config
       (push 'company-lsp company-backends))
   #+end_src
** company-box
   #+begin_src emacs-lisp
     (use-package company-box
       :ensure t
       :disabled t
       :hook (company-mode . company-box-mode))
     (add-hook 'coq-mode-hook 'my-inhibit-global-company-box-mode)

     (defun my-inhibit-global-company-box-mode ()
       "Counter-act `global-linum-mode'."
       (add-hook 'after-change-major-mode-hook
		 (lambda () (company-box-mode 0))
		 :append :local))
   #+end_src
** company-coq
   #+begin_src emacs-lisp
     (use-package company-coq
       :ensure t
       :hook (coq-mode . company-coq-mode)
       :init
       (setq company-coq-live-on-the-edge t)
       (with-eval-after-load 'company-coq
       (add-to-list 'company-coq-disabled-features 'coqdoc)))
   #+end_src
* icon-in-terminal (optional)
  #+begin_src emacs-lisp
    ;(add-to-list 'load-path "~/.local/share/icons-in-terminal/")
    ;(add-to-list 'load-path "~/.emacs.d/orphan/")
    ;(require 'icons-in-terminal)
  #+end_src
* flycheck 
  #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode)
       )
    ; (use-package flycheck-popup-tip
      ; :ensure t
      ; :config
      ; (with-eval-after-load 'flycheck
      ; '(add-hook 'flycheck-mode-hook 'flycheck-popup-tip-mode)))
  #+end_src
* rainbow-mode RGB
  #+begin_src emacs-lisp
    (use-package rainbow-mode
      :defer t
      :ensure t)
  #+end_src
** for parentness
  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :hook (scheme-mode . rainbow-delimiters-mode))
  #+end_src
* learn-English (sdcv)
  #+begin_src emacs-lisp
    (use-package posframe
      :ensure t)
    (require 'subr-x)
    ;(add-to-list 'load-path "~/.emacs.d/elpa/sdcv/")
    (use-package sdcv
      :demand t
      :quelpa
      (sdcv
       :fetcher github
       :repo "manateelazycat/sdcv")
      )
    (setq sdcv-say-word-p t)               ;say word after translation

    (setq sdcv-dictionary-data-dir "/home/loutine/.stardict/dic") ;setup directory of stardict dictionary

    (setq sdcv-dictionary-simple-list    ;setup dictionary list for simple search
	  '("朗道英汉字典5.0"
	    "懒虫简明汉英词典"))

    (setq sdcv-dictionary-complete-list     ;setup dictionary list for complete search
	  '(
	"懒虫简明英汉词典"
	"懒虫简明汉英词典"
	"朗道英汉字典5.0"
	"朗道汉英字典5.0"
	"牛津英汉双解美化版"
	))
  #+end_src
